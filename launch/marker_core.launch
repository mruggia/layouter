<?xml version="1.0"?>

<launch>

  <!-- outgoing/incoming topic names -->
  <arg name="odometry_drone"       default="odometry_drone" />        <!-- topic name of drone odometry -->
  <arg name="setpoint_drone"       default="setpoint_drone" />        <!-- topic name of drone setpoint -->
  <arg name="wrench_drone"         default="wrench_drone" />          <!-- topic name of drone wrench -->
  <arg name="odometry_plate_vicon" default="odometry_plate_vicon" />  <!-- topic name of plate odometry (only used if camera mode="vicon") -->
  <!-- device paths -->
  <arg name="device_drawer"        default="" />                      <!-- drawer servo -->
  <arg name="device_wheels"        default="" />                      <!-- wheels dynamixels -->


  <!-- marker namespace -->
  <group ns="marker">

    <!-- save arg as param in marker namespace -->
    <param name="odometry_drone"       value="$(arg odometry_drone)" />
    <param name="setpoint_drone"       value="$(arg setpoint_drone)" />
    <param name="wrench_drone"         value="$(arg wrench_drone)" />
    <param name="odometry_plate_vicon" value="$(arg odometry_plate_vicon)" />
    <param name="device_drawer"        value="$(arg device_drawer)" />
    <param name="device_wheels"        value="$(arg device_wheels)" />

    <!-- camera node: odometry_drone & [camera] -> odometry_plate -->
    <node name="camera" pkg="marker" type="camera.py" output="screen" clear_params="true">
      <!-- general parameters -->
      <param name="rate"           value="50"/>             <!-- [Hz] rate at which plate odometry is published -->
      <param name="mode"           value="camera"/>         <!-- plate tracking mode: "camera", "vicon", "none" -->
    </node>

    <!-- planner node: odometry_drone & odometry_plate -> setpoint_drone & setpoint_plate & draw -->
    <node name="planner" pkg="marker" type="planner.py" output="screen" clear_params="true">
      <!-- general parameters -->
      <param name="rate"           value="50"/>             <!-- [Hz] rate at which setpoint topic is published -->
      <param name="comp_drone_err" value="1"/>              <!-- [1 or 0] flag if tracking error of drone is to be compensated -->
      <!-- trajectory parameters -->
      <param name="max_vel"        value="50.0"/>           <!-- [mm/s] max velocity in trajectory -->
      <param name="max_acc"        value="25.0"/>           <!-- [mm/s^2]max acceleration in trajectory -->
      <param name="wait_draw"      value="0.5"/>            <!-- [s] time to wait after draw on/off command is sent -->
      <param name="wait_corner"    value="0.5"/>            <!-- [s] time to wait at sharp corner -->
      <param name="tresh_corner"   value="2.0"/>            <!-- [deg] angle treshold for a corner to be sharp -->
    </node>

    <!-- preplanner node: command -> setpoint_drone -->
    <node name="preplanner" pkg="marker" type="preplanner.py" output="screen" clear_params="true">
      <!-- general parameters -->
      <param name="rate"           value="50"/>             <!-- [Hz] rate at which setpoint topic is published -->
      <param name="des_move"       value="[-0.28,-0.24,2.0]"/>  <!-- [m] desider drone position after "move" service call-->
      <param name="des_touch_distance" value="0.170"/>      <!-- [m] desired dz distance after "touch_distance" service call -->
      <param name="des_touch_force"    value="68"/>         <!-- [N] desired z force after "touch_force" service call -->
      <param name="vel_move"       value="0.2"/>            <!-- [m/s] max velocity in "move" service call -->
      <param name="vel_touch"      value="0.02"/>           <!-- [m/s] max velocity in "touch" service call -->
    </node>

    <!-- wheels node: setpoint_plate & odometry_plate -> [dynamixel motors] -->
    <node name="wheels" pkg="marker" type="wheels.py" output="screen" clear_params="true">
      <!-- general parameters -->
      <param name="rate"           value="50"/>             <!-- [Hz] rate at which wheel commands are updated -->
      <param name="wheel_dia"      value="102.8"/>          <!-- [mm] diameter of omni wheels -->
      <param name="wheel_dist"     value="102.5"/>          <!-- [mm] radial distance from center to wheel contact point -->
      <!-- controller parameters -->
      <param name="controller"     value="ff"/>              <!-- controller type: "ff":feed-forward, "p":proportional  -->
      <param name="ctrl_pos_p"     value="4.0"/>            <!-- P gain of proportional position controller -->
      <param name="ctrl_ang_p"     value="0.5"/>            <!-- P gain of proportional angle controller -->
      <!-- dynamixel parameters -->
      <param name="DXL_ID1"        value="21"/>             <!-- ID of dynamixel motor 1 (at 120deg from x-axis) -->
      <param name="DXL_ID2"        value="22"/>             <!-- ID of dynamixel motor 2 (at 270deg from x-axis) -->
      <param name="DXL_ID3"        value="23"/>             <!-- ID of dynamixel motor 3 (at 30deg from x-axis) -->
    </node>

    <!-- drawer node: draw -> [marker servo] -->
    <node name="drawer" pkg="marker" type="drawer.py" output="screen" clear_params="true"/>


  </group>

</launch>
